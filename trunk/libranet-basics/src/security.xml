<!-- $Id$ -->

<chapter> <?dbhtml filename="security.html"?>
<title>Security</title>

<sect1>
<title>Introduction</title>

<para>
With the increasing usage of the Internet and wireless networks security
is getting more important every day. It is impossible to cover this subject
in a single chapter of an introduction to GNU/Linux. This chapter covers
some basic security techniques that provide a good start for desktop
and server security.
</para>

<para>
Before we go on to specific subjects, it is a good idea to make some remarks
about passwords. Computer authorization largely relies on passwords. Be
sure to use good passwords in all situations. Avoid using words, names,
birth dates and short passwords. These passwords can easily be cracked
with dictionary attacks or brute force attacks against hosts or password
hashes. Use long passwords, ideally eight characters or longer, consisting
of random letters (including capitals) and numbers.
</para>
</sect1>

<sect1>
<title>E-Mail security</title>

<sect2>
<title>Introduction</title>

<para>
GNU/Linux supports two major of securing e-mails, but before we will look
into these specifically we are going to look what e-mail security provides.
There are two ways in which you can secure e-mails: signing e-mail and
encrypting e-mail. Signing e-mail means that a special digital signature
is added to the e-mail by the mail user agent. The recipient can use the
signature to check whether an e-mail is really from the sender it claims
to be from or not, and that the message is not in any way changed during
the transmission. E-Mail encryption codes the e-mail in a way that
only the intended recipient can decode it.
</para>

<para>
This system relies on two keys: the private and the public key. Public
keys are used to encrypt messages, and messages can only be decrypted
with the private key. This means that one can sent his public key out to
people. People can use this key to send encrypted e-mails, that only 
the person with the private key can decode. Of course, this means that
the security of this system depends on how well the private is kept
secret.
</para>

<para>
One might wonder why he or she should use one of these techniques. While
most people do not feel the need to encrypt most of their e-mails, it
generally is a good idea to sign your e-mails. There are, for example,
a lot of viruses these days that use other people's e-mail addresses
in the <emphasis>From:</emphasis> field of viruses. If the people who
you are communicating with know that you sign your e-mails, they will
not open fake e-mail from viruses. Besides that it looks much more
professional if people can check your identity, especially in business
transactions. For example, who would you rather trust, 
<emphasis>vampire_boy93853@hotmail.com</emphasis>, or someone using
a professional e-mail address with digitally signed e-mails?
</para>

<bridgehead>GnuPG or S/MIME</bridgehead>

<para>
At the moment there two major standards that are supported by GNU/Linux,
the OpenPGP standard, by the GnuPG tool, and S/MIME. Both are about
equally good concerning the strength of the used encryption algorithms.
The big difference is that S/MIME relies on a certificate authority
(CA), GnuPG does not. A certificate authority is an organization that
is authorized to hand out keys. This means that the certificate authority
validates that the e-mail address and/or name in the certificate is
authentic. This means that either:
</para>

<itemizedlist>
<listitem>
<para>
The certificate (aka private and public key) belongs to the owner of
the e-mail address. E-Mail verification is used by the certificate
authority to check this.
</para>
</listitem>
<listitem>
<para>
The certificate belongs to the owner of the e-mail address, and to the
name in the certificate. This involves an extra step than e-mail verification.
To have a certificate with a name, your identity has to be checked by
the certificate authority.
</para>
</listitem>
</itemizedlist>

<para>
As you can see this system is quite bullet-proof, and you can reasonably
expect that a certificate is authentically representing the e-mail address
and/or person. GnuPG does not use a certificate authority. This means that
anybody can make a key with your name and e-mail address. Trust is established
by signing keys. For example, person A verifies that person B's key really
belongs to person B, by meeting him in real life, and he signs his key. The
authenticity of a key is more certain if it is signed by people who you
trust. As you can guess this system is not completely bullet proof, and it
can take some time to get your key trusted by other people. Besides, if
you use another e-mail address, ant want to use a new key you will have to
start all over again. The advantage of this approach is that your private
key is not known to a certificate authority.
</para>

<para>
GnuPG used to be supported a lot better on GNU/Linux, but more and more
e-mail clients support S/MIME these days. On Windows S/MIME is better
supported, because Outlook Express and Mozilla Mail (two commonly used
e-mail clients) both have S/MIME support. If you are communicating
with many people that use Windows, it is a good choice to go for S/MIME,
because it is worthless to use signed e-mails if the recipient can not
verify them by default.
</para>
</sect2>
</sect1>

<sect1>
<title>Closing services</title>

<sect2>
<title>Introduction</title>

<para>
Many GNU/Linux run some services that are open to a local network or the
Internet. Other hosts can connect to these services by connecting to specific
ports. For example, port 80 is used for WWW traffic. The
<filename>/etc/services</filename> file contains a table with all commonly
used services, and the port numbers that are used for these services.
</para>

<para>
A secure system should only run the services that are necessary. So, suppose
that a host is acting as a web server, it should not have ports open (thus
servicing) FTP or SMTP. With more open ports security risks increase very
fast, because there is a bigger chance that the software servicing a port
has a vulnerability, or is badly configured. The following few sections
will help you tracking down which ports are open, and closing them.
</para>
</sect2>

<sect2>
<title>Finding open ports</title>

<para>
Open ports can be found using a port scanner. Probably the most famous 
port scanner for GNU/Linux is <command>nmap</command>. <command>nmap</command>
is available through the Debian package repositories. You can install
<command>nmap</command> through you favorite package manager, or using APT: 
</para>

<screen>
# <command>apt-get install nmap</command>
</screen>

<para>
The basic <command>nmap</command> syntax is: <command>nmap host</command>. The
<emphasis>host</emphasis> parameter can either be a hostname or IP address.
Suppose that we would like to scan the host that <command>nmap</command>
is installed on. In this case we could specify the 
<emphasis>localhost</emphasis> IP address, <emphasis>127.0.0.1</emphasis>:
</para>

<screen>
$ <command>nmap 127.0.0.1</command>

Starting nmap V. 3.00 ( www.insecure.org/nmap/ )
Interesting ports on localhost (127.0.0.1):
(The 1596 ports scanned but not shown below are in state: closed)
Port       State       Service
21/tcp     open        ftp                     
22/tcp     open        ssh                     
23/tcp     open        telnet                  
80/tcp     open        http                    
6000/tcp   open        X11                     

Nmap run completed -- 1 IP address (1 host up) scanned in 0 seconds
</screen>

<para>
In this example you can see that the host has five open ports that are
being serviced; ftp, ssh, telnet, http and X11.
</para>
</sect2>

<sect2>
<title>inetd</title>

<para>
There are two ways to offer TCP/IP services: by running server
applications  stand-alone as a daemon or by using the internet super
server, <command>inetd</command>(8). inetd  is a daemon which monitors
a range of ports. If a client attempts to connect  to a port inetd
handles the connection and forwards the connection to the  server
software which handles that kind of connection. The advantage of this
approach is that it adds an extra layer of security and it makes it
easier to  log incoming connections. The disadvantage is that it is
somewhat slower than  using a stand-alone daemon. It is thus a good
idea to run a stand-alone daemon on, for example, a heavily loaded FTP
server.
</para>

<para>
You can check whether <command>inetd</command> is running on a host or
not with <command>ps</command>, for example:
</para>

<screen>
$ <command>ps ax | grep inetd</command>
 2845 ?        S      0:00 /usr/sbin/inetd
</screen>

<para>
In this example inetd is running with PID (process ID) 2845. 
<command>inetd</command> can be configured using the
<filename>/etc/inetd.conf</filename> file. Let's have a look at an example 
line from inetd.conf:
</para>

<screen>
# File Transfer Protocol (FTP) server:
ftp     stream  tcp     nowait  root    /usr/sbin/tcpd  proftpd
</screen>

<para>
This line specifies that inetd should accept FTP connections and pass them to 
<command>tcpd</command>. This may seem a bit odd, because 
<command>proftpd</command> normally handles FTP connections. You can also 
specify to use proftpd directly in <filename>inetd.conf</filename>, but 
it is a good idea to give the connection to <command>tcpd</command>. This 
program passes the connection to <command>proftpd</command> in turn, as 
specified. <command>tcpd</command> is used to monitor services and to provide 
host based access control. 
</para>

<para>
Services can be disabled by adding the comment character (#) at the beginning 
of the line. It is a good idea to disable all services and enable services you 
need one at a time. After changing <filename>/etc/inetd.conf</filename> 
<command>inetd</command> needs to be restarted to activate the changes. This 
can be done by sending the HUP signal to the inetd process:
</para>

<screen>
# <command>ps ax | grep 'inetd'</command>
   2845 ?        S      0:00 /usr/sbin/inetd
# <command>kill -HUP 2845</command>
</screen>

<para>
If you do not need <command>inetd</command> at all, it is a good idea to
remove it. If you want to keep it installed, but do not want Libranet
to load it at the booting process, execute the following command as root:
</para>

<screen>
# <command>update-rc.d -f inetd remove</command>
</screen>
</sect2>
</sect1>

</chapter>
