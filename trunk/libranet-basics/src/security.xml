<!-- $Id: security.xml,v 1.1 2004/07/10 15:42:52 danieldk Exp $ -->

<chapter> <?dbhtml filename="security.html"?>
<title>Security</title>

<sect1>
<title>Introduction</title>

<para>
With the increasing usage of the Internet and wireless networks security
is getting more important every day. It is impossible to cover this subject
in a single chapter of an introduction to GNU/Linux. This chapter covers
some basic security techniques that provide a good start for desktop
and server security.
</para>

<para>
Before we go on to specific subjects, it is a good idea to make some remarks
about passwords. Computer authorization largely relies on passwords. Be
sure to use good passwords in all situations. Avoid using words, names,
birth dates and short passwords. These passwords can easily be cracked
with dictionary attacks or brute force attacks against hosts or password
hashes. Use long passwords, ideally eight characters or longer, consisting
of random letters (including capitals) and numbers.
</para>
</sect1>

<sect1>
<title>Closing services</title>

<sect2>
<title>Introduction</title>

<para>
Many GNU/Linux run some services that are open to a local network or the
Internet. Other hosts can connect to these services by connecting to specific
ports. For example, port 80 is used for WWW traffic. The
<filename>/etc/services</filename> file contains a table with all commonly
used services, and the port numbers that are used for these services.
</para>

<para>
A secure system should only run the services that are necessary. So, suppose
that a host is acting as a web server, it should not have ports open (thus
servicing) FTP or SMTP. With more open ports security risks increase very
fast, because there is a bigger chance that the software servicing a port
has a vulnerability, or is badly configured. The following few sections
will help you tracking down which ports are open, and closing them.
</para>
</sect2>

<sect2>
<title>Finding open ports</title>

<para>
Open ports can be found using a port scanner. Probably the most famous 
port scanner for GNU/Linux is <command>nmap</command>. <command>nmap</command>
is available through the Debian package repositories. You can install
<command>nmap</command> through you favorite package manager, or using APT: 
</para>

<screen>
# <command>apt-get install nmap</command>
</screen>

<para>
The basic <command>nmap</command>syntax is: <command>nmap host</command>. The
<emphasis>host</emphasis> parameter can either be a hostname or IP address.
Suppose that we would like to scan the host that <command>nmap</command>
is installed on. In this case we could specify the 
<emphasis>localhost</emphasis> IP address, <emphasis>127.0.0.1</emphasis>:
</para>

<screen>
$ <command>nmap 127.0.0.1</command>

Starting nmap V. 3.00 ( www.insecure.org/nmap/ )
Interesting ports on localhost (127.0.0.1):
(The 1596 ports scanned but not shown below are in state: closed)
Port       State       Service
21/tcp     open        ftp                     
22/tcp     open        ssh                     
23/tcp     open        telnet                  
80/tcp     open        http                    
6000/tcp   open        X11                     

Nmap run completed -- 1 IP address (1 host up) scanned in 0 seconds
</screen>

<para>
In this example you can see that the host has five open ports that are
being serviced; ftp, ssh, telnet, http and X11.
</para>
</sect2>

</sect1>

</chapter>
