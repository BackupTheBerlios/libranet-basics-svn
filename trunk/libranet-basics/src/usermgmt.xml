<!-- $Id$ -->

<chapter> <?dbhtml filename="usermgmt.html"?>
<title>User management</title>

<sect1>
<title>Introduction</title>

<para>
GNU/Linux is a multi-user operating system. This means that multiple users
can use the system, and they can use the system simultaneously. The GNU/Linux
concepts for user management are quite simple. First of all, there are several
user accounts on each system. Even on a single user system there are multiple 
user accounts, because GNU/Linux uses unique accounts for some tasks. Users
can be members of groups. Groups are used for more fine grained permissions,
for example, you could make a file readable by a certain group. There are
a few reserved users and groups on each system. The most important of these
is the <emphasis>root</emphasis> account. The <emphasis>root</emphasis>
user is the system administrator. It is a good idea to avoid logging in
as root, because this greatly enlarges security risks. You can just log in
as a normal user, and perform system administration tasks using the
<command>su</command> and <command>sudo</command> commands. Adminmenu will
automatically ask you to enter the <emphasis>root</emphasis> password
when you would like to administrate the system. 
</para>

<para>
The available user accounts are specified in the 
<filename>/etc/passwd</filename>. You can have a look at this file to get
an idea of which user account are mandatory. As you will probably notice,
there are no passwords in this file. Passwords are kept in the separate
<filename>/etc/shadow</filename> file, as an encrypted string. Information
about groups is stored in <filename>/etc/group</filename>. It is generally
speaking not a good idea to edit these files directly. There are some
excellent tools that can help you with user and group administration. This
chapter will describe some of these tools.
</para>
</sect1>

<sect1>
<title>Administrating users via adminmenu</title>

<para>
Most tasks related to user management can be performed with the items
that are available under the <emphasis>Users</emphasis> tab in Adminmenu.
</para>

<figure id="adminmenu-users">
<title>The <emphasis>Users</emphasis> page button</title>
<mediaobject>
<imageobject>
<imagedata fileref="../images/adminmenu/users/pagebutton.jpg" format="JPG" />
</imageobject>
</mediaobject>
</figure>

<para>
The <emphasis>Users</emphasis> page offers two items:
</para>

<itemizedlist>
<listitem>
<para>
<emphasis>Manage user accounts</emphasis>: with this item you can add,
edit and remove user accounts, and change account passwords.
</para>
</listitem>
<listitem>
<para>
<emphasis>Restore user settings</emphasis>: this item can be user to
restore the user settings to the original values from when the account
was created.
</para>
</listitem>
</itemizedlist>

<sect2>
<title>Adding and removing users</title>

<para>
Adminmenu can be used to add and remove users, besides you can change
a user password with adminmenu. These operations can be performed with
the <quote>Manage users</quote> item that is available through the
<quote>Users</quote> menu in Adminmenu.
</para>

<figure id="adminmenu-users-manageusers">
<title>The <emphasis>Manage users</emphasis> item</title>
<mediaobject>
<imageobject>
<imagedata fileref="../images/adminmenu/users/manageusers.jpg" format="JPG" />
</imageobject>
</mediaobject>
</figure>

<para>
You can change settings for an existing user, by selecting the user
with the <emphasis>Select User</emphasis> pull-down button. There
are a few tabs that can be used to alter the settings for the user
(<xref linkend="adminmenu-users-manageusers-edit" />).
The password for a user can be changed under the
<emphasis>Password</emphasis> tab. The default shell can be set under
the <emphasis>User preferences</emphasis> tab. You can also activate
or deactivate an account from this tab. Some additional information
about a user, like his/her full name can be entered under the
<emphasis>User info</emphasis> tab. Finally, the <emphasis>Groups</emphasis>
tab can be used to toggle to which user groups a user belongs to.
Normally, it is not necessary to change the group sections, since the
Adminmenu user management tool automatically adds new users the groups
that a user needs to be member of to perform most tasks.
</para>

<figure id="adminmenu-users-manageusers-edit">
<title>Editing a user account</title>
<mediaobject>
<imageobject>
<imagedata fileref="../images/adminmenu/users/manageusers-edit.jpg" format="JPG" />
</imageobject>
</mediaobject>
</figure>

<para>
You can add a new user with the <emphasis>New user</emphasis> button.
The user management tool will ask you to enter the name of the new user
account (<xref linkend="adminmenu-users-manageusers-new" />). Afterwards,
you can make the same settings as when you edit the settings for an
existing user. The most important change to make is setting a password.
</para>

<figure id="adminmenu-users-manageusers-new">
<title>Adding a new user account</title>
<mediaobject>
<imageobject>
<imagedata fileref="../images/adminmenu/users/manageusers-new.jpg" format="JPG" />
</imageobject>
</mediaobject>
</figure>

<para>
The <quote>Remove User</quote> button removes the selected user. You
will be asked to confirm the choice (<xref
linkend="adminmenu-users-manageusers-remove" />).
</para>

<figure id="adminmenu-users-manageusers-remove">
<title>Removing a user account</title>
<mediaobject>
<imageobject>
<imagedata fileref="../images/adminmenu/users/manageusers-remove.jpg" format="JPG" />
</imageobject>
</mediaobject>
</figure>

</sect2>

<sect2>
<title>Restoring the default user settings</title>

<para>
Libranet GNU/Linux 3.0 has a new item in Adminmenu, named <emphasis>Restore
user settings</emphasis>, that is available under the
<emphasis>Users</emphasis> tab. This item will reset the settings, e.g.
the desktop configuration, to the default Libranet configuration. This
is useful if the configuration of a user is messed up. This tool is very
simple, you can select the user for which you would like to restore his or
her settings from the <emphasis>User account</emphasis> dialog, and press
the <emphasis>Restore</emphasis> button. You will be asked to confirm the
operation before the change will be performed.
</para>
</sect2>
</sect1>

<sect1>
<title>Command-line tools</title>

<sect2>
<title>useradd</title>

<para>
The <command>useradd</command> is used to add user accounts to the system.
Running <command>useradd</command> with a user name as parameter will create
the user on the system. For example:
</para>

<screen>
# <command>useradd bob</command>
</screen>

<para>
Creates the user account <emphasis>bob</emphasis>. Please be aware that
this does not create a home directory for the user. Add the 
<emphasis>-m</emphasis> parameter to create a home directory. For
example:
</para>

<screen>
# <command>useradd -m bob</command>
</screen>

<para>
This would add the user <emphasis>bob</emphasis> to the system, and
create the <filename>/home/bob</filename> home directory for this user.
Normally the user is made a member of the <emphasis>users</emphasis>
group. Suppose that we would like to make <emphasis>crew</emphasis>
the primary group for the user <emphasis>bob</emphasis>. This can
be done using the <emphasis>-g</emphasis> parameter. For example:
</para>

<screen>
# <command>useradd -g crew -m bob</command>
</screen>

<para>
It is also possible to add this user to secondary groups during the
creation of the account with the <emphasis>-G</emphasis>. Group names
can be separated with a comma. The following command would create the
user <emphasis>bob</emphasis>, which is a member of the 
<emphasis>crew</emphasis> group, and the <emphasis>www-admins</emphasis>
and <emphasis>ftp-admins</emphasis> secondary groups:
</para>

<screen>
# <command>useradd -g crew -G www-admins,ftp-admins -m bob</command>
</screen>

<para>
By default the <command>useradd</command> only adds users, it does not
set a password for the added user. Passwords can be set using the
<command>passwd</command> command.
</para>
</sect2>

<sect2>
<title>passwd</title>

<para>
As you probably guessed the <command>passwd</command> command is used to
set a password for a user. Running this command as a user without a
parameter will change the password for this user. The password command
will ask for the old password,once and twice for the new password:
</para>

<screen>
$ <command>passwd</command>
Changing password for bob
(current) UNIX password: 
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
</screen>

<para>
The <emphasis>root</emphasis> user can set passwords for users by specifying
the user name as a parameter. The <command>passwd</command> command will only
ask for the new password. For example:
</para>

<screen>
# <command>passwd bob</command>
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
</screen>
</sect2>

<sect2>
<title>userdel</title>

<para>
Sometimes it is necessary to remove a user account from the system. GNU/Linux
offers the <command>userdel</command> tool to do this. Just specify the
username as a parameter to remove that user from the system. For example,
the following command will remove the user account <emphasis>bob</emphasis>
from the system:
</para>

<screen>
# <command>userdel bob</command>
</screen>

<para>
This will only remove the user account, not the user's home directory and
mail spool. Just add the <emphasis>-r</emphasis> parameter to delete the
user's home directory and mail spool too. For example:
</para>

<screen>
# <command>userdel -r bob</command>
</screen>
</sect2>
</sect1>

<sect1>
<title>Avoiding root usage</title>

<para>
It is a good idea to avoid logging in as
<emphasis>root</emphasis>. There are many reasons for not doing
this. Accidentally typing a wrong command could cause bad things to
happen, and malicious programs can make a lot of damage when you are
logged in as <emphasis>root</emphasis>.  Still, there are many
situations in which you need to have root access. For example, to do
system administration, or to install new software. Fortunately the
<command>su</command> can give you temporal root privileges.
</para>

<para>
Using <command>su</command> is very simple. Just executing 
<command>su</command> will ask you for the root password, and will
start a shell with root privileges after the password is correctly
entered:
</para>

<screen>
$ <command>whoami</command>
bob
$ <command>su</command>
Password: 
# <command>whoami</command>
root
# <command>exit</command>
exit
$ <command>whoami</command>
bob
</screen>

<para>
In this example the user <emphasis>bob</emphasis> is logged on, the
<command>whoami</command> output reflects this. The user executes su
and enters the <emphasis>root</emphasis> password. <command>su</command>
launches a shell with root privileges, this is confirmed by the
<command>whoami</command> output. After exiting the <emphasis>root</emphasis>
shell, control is returned to the original running shell running with
the privileges of the user <emphasis>bob</emphasis>.
</para>

<para>
It is also possible to execute just one command as the 
<emphasis>root</emphasis> user with the <emphasis>-c</emphasis>
parameter. The following example will run <command>update-grub</command>:
</para>

<screen>
$ <command>su -c update-grub</command>
</screen>

<para>
If you want to give parameters to the command you would like to run,
use quotes (e.g. <command>su -c &quot;ls -l /&quot;</command>). Without quotes
<command>su</command> cannot determine whether the parameters should
be used by the specified command, or by <command>su</command> itself.
</para>  

</sect1>

</chapter>
